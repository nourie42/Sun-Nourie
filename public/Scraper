<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real Gas Station Finder & Ranker</title>
    <script>
        // =================================
        // API CONFIGURATION - ADD YOUR KEYS HERE
        // =================================
        
        const API_CONFIG = {
            // Get from: https://console.cloud.google.com/apis/credentials
            GOOGLE_PLACES_API_KEY: 'AIzaSyBlm18rIsI1bhOwhx3bpHAX589EahvLbPc',
            GOOGLE_GEOCODING_API_KEY: 'AIzaSyBlm18rIsI1bhOwhx3bpHAX589EahvLbPc', // Can be same as Places
            GOOGLE_STREETVIEW_API_KEY: 'AIzaSyBlm18rIsI1bhOwhx3bpHAX589EahvLbPc', // Can be same as Places
            
            // Get from: https://www.yelp.com/developers/v3/manage_app
            YELP_API_KEY: 'YOUR_YELP_API_KEY_HERE',
            
            // Optional: Get from GasBuddy (if they have public API)
            GASBUDDY_API_KEY: 'YOUR_GASBUDDY_API_KEY_HERE',
            
            // CORS Proxy for browser requests (or use your own backend)
            CORS_PROXY: 'https://cors-anywhere.herokuapp.com/',
            // Alternative: 'https://api.allorigins.win/raw?url='
        };
        
        // =================================
        // API SETUP INSTRUCTIONS
        // =================================
        
        function showAPISetupInstructions() {
            alert(`
🔧 API SETUP INSTRUCTIONS:

1. GOOGLE APIS (Required):
   • Go to: https://console.cloud.google.com/
   • Create new project or select existing
   • Enable APIs: Places API, Geocoding API, Street View Static API
   • Create credentials → API Key
   • Copy key to GOOGLE_PLACES_API_KEY above

2. YELP API (Optional but recommended):
   • Go to: https://www.yelp.com/developers/v3/manage_app
   • Create new app
   • Copy API Key to YELP_API_KEY above

3. CORS SETUP:
   • For production: Deploy to your own server
   • For testing: Use CORS proxy or disable browser CORS
   • Update CORS_PROXY setting above

4. SECURITY:
   • Never commit API keys to public repos
   • Use environment variables in production
   • Restrict API keys by domain/IP
            `);
        }

        // =================================
        // REAL API FUNCTIONS
        // =================================

        let selectedType = 'vintage';
        
        function selectType(type) {
            selectedType = type;
            console.log('Selected type:', type);
            
            const momCard = document.getElementById('momandpop-card');
            const vinCard = document.getElementById('vintage-card');
            
            if (momCard && vinCard) {
                momCard.classList.remove('selected');
                vinCard.classList.remove('selected');
                
                if (type === 'momandpop') {
                    momCard.classList.add('selected');
                } else {
                    vinCard.classList.add('selected');
                }
            }
        }
        
        async function handleButtonClick() {
            // Check if APIs are configured
            if (API_CONFIG.GOOGLE_PLACES_API_KEY === 'YOUR_GOOGLE_PLACES_API_KEY_HERE') {
                showAPISetupInstructions();
                return;
            }
            
            const area = document.getElementById('searchArea').value || 'Los Angeles, CA';
            const radius = document.getElementById('searchRadius').value || '10';
            const maxResults = document.getElementById('maxResults').value || '20';
            
            console.log(`Searching for REAL ${selectedType} gas stations in ${area}`);
            
            const button = document.getElementById('scrapeButton');
            const progressBar = document.getElementById('progressFill');
            const statusText = document.getElementById('statusText');
            
            if (button) {
                button.disabled = true;
                button.innerHTML = 'Searching Real Stations...';
            }
            
            try {
                // Step 1: Get coordinates for the area
                updateProgress(20, `Getting coordinates for ${area}...`);
                const coords = await getCoordinatesReal(area);
                
                // Step 2: Search for real gas stations
                updateProgress(40, `Searching Google Places for gas stations...`);
                const stations = await findRealGasStations(coords.lat, coords.lng, radius, maxResults);
                
                // Step 3: Filter by type and analyze
                updateProgress(60, `Analyzing stations for ${selectedType} characteristics...`);
                const filteredStations = await filterStationsByTypeReal(stations, selectedType);
                
                // Step 4: Get station details and images
                updateProgress(80, 'Getting real station photos and details...');
                const detailedStations = await getStationDetailsReal(filteredStations);
                
                // Step 5: Rank stations
                updateProgress(100, 'Ranking stations by criteria...');
                const rankedStations = rankRealStations(detailedStations, selectedType);
                
                displayRealResults(rankedStations, area);
                
            } catch (error) {
                console.error('Error finding real stations:', error);
                alert(`API Error: ${error.message}\n\nPlease check your API keys and internet connection.`);
                
                // Show demo data as fallback
                showDemoWithDisclaimer(area);
            } finally {
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '🚀 Find Real Stations';
                }
            }
        }
        
        // =================================
        // REAL API IMPLEMENTATIONS
        // =================================
        
        async function getCoordinatesReal(address) {
            try {
                const response = await fetch(
                    `${API_CONFIG.CORS_PROXY}https://maps.googleapis.com/maps/api/geocode/json?` +
                    `address=${encodeURIComponent(address)}&key=${API_CONFIG.GOOGLE_GEOCODING_API_KEY}`
                );
                
                if (!response.ok) {
                    throw new Error('Geocoding API request failed');
                }
                
                const data = await response.json();
                
                if (data.status !== 'OK' || !data.results.length) {
                    throw new Error('Location not found');
                }
                
                const location = data.results[0].geometry.location;
                return { lat: location.lat, lng: location.lng };
                
            } catch (error) {
                console.error('Geocoding error:', error);
                throw error;
            }
        }
        
        async function findRealGasStations(lat, lng, radiusMiles, maxResults) {
            try {
                const radiusMeters = radiusMiles * 1609.34; // Convert miles to meters
                
                const response = await fetch(
                    `${API_CONFIG.CORS_PROXY}https://maps.googleapis.com/maps/api/place/nearbysearch/json?` +
                    `location=${lat},${lng}&radius=${radiusMeters}&type=gas_station&` +
                    `key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`
                );
                
                if (!response.ok) {
                    throw new Error('Google Places API request failed');
                }
                
                const data = await response.json();
                
                if (data.status !== 'OK') {
                    throw new Error(`Places API error: ${data.status}`);
                }
                
                // Limit results
                return data.results.slice(0, maxResults);
                
            } catch (error) {
                console.error('Places API error:', error);
                throw error;
            }
        }
        
        async function getStationDetailsReal(stations) {
            const detailedStations = [];
            
            for (const station of stations) {
                try {
                    // Get place details
                    const detailsResponse = await fetch(
                        `${API_CONFIG.CORS_PROXY}https://maps.googleapis.com/maps/api/place/details/json?` +
                        `place_id=${station.place_id}&fields=name,formatted_address,rating,reviews,photos,website,formatted_phone_number&` +
                        `key=${API_CONFIG.GOOGLE_PLACES_API_KEY}`
                    );
                    
                    if (detailsResponse.ok) {
                        const detailsData = await detailsResponse.json();
                        station.details = detailsData.result;
                    }
                    
                    // Get Street View images
                    station.streetViewImages = await getStreetViewImages(
                        station.geometry.location.lat,
                        station.geometry.location.lng
                    );
                    
                    detailedStations.push(station);
                    
                    // Add delay to avoid rate limiting
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                } catch (error) {
                    console.error(`Error getting details for ${station.name}:`, error);
                    detailedStations.push(station); // Add without details
                }
            }
            
            return detailedStations;
        }
        
        async function getStreetViewImages(lat, lng) {
            const images = [];
            const headings = [0, 90, 180, 270]; // Different angles
            
            for (const heading of headings) {
                const imageUrl = 
                    `https://maps.googleapis.com/maps/api/streetview?` +
                    `size=400x300&location=${lat},${lng}&heading=${heading}&pitch=0&` +
                    `key=${API_CONFIG.GOOGLE_STREETVIEW_API_KEY}`;
                
                images.push({
                    url: imageUrl,
                    heading: heading,
                    description: `Street view ${heading}°`
                });
            }
            
            return images;
        }
        
        async function filterStationsByTypeReal(stations, type) {
            const filteredStations = [];
            
            for (const station of stations) {
                let score = 0;
                
                // Analyze station name for vintage indicators
                const name = station.name.toLowerCase();
                const vintageKeywords = ['classic', 'heritage', 'vintage', 'old', 'historic', 'retro'];
                const modernKeywords = ['express', 'quick', 'fast', 'plus', 'super'];
                
                if (type === 'vintage') {
                    score += vintageKeywords.some(keyword => name.includes(keyword)) ? 10 : 0;
                    score += ['shell', 'texaco', 'phillips', 'sunoco'].some(brand => name.includes(brand)) ? 5 : 0;
                } else {
                    score += modernKeywords.some(keyword => name.includes(keyword)) ? 10 : 0;
                    score += !['shell', 'bp', 'exxon', 'chevron'].some(brand => name.includes(brand)) ? 5 : 0;
                }
                
                // Analyze reviews for type indicators (if available)
                if (station.details && station.details.reviews) {
                    const reviewText = station.details.reviews.map(r => r.text).join(' ').toLowerCase();
                    
                    if (type === 'vintage') {
                        score += (reviewText.match(/vintage|classic|old.school|nostalgic/g) || []).length * 2;
                    } else {
                        score += (reviewText.match(/modern|new|clean|updated/g) || []).length * 2;
                    }
                }
                
                station.typeScore = score;
                
                // Include stations with score > 0 or if we need more results
                if (score > 0 || filteredStations.length < 10) {
                    filteredStations.push(station);
                }
            }
            
            // Sort by type score
            return filteredStations.sort((a, b) => (b.typeScore || 0) - (a.typeScore || 0));
        }
        
        function rankRealStations(stations, type) {
            return stations.map((station, index) => {
                const rating = station.rating || 3.5;
                const reviewCount = station.user_ratings_total || 10;
                const typeScore = station.typeScore || 0;
                
                // Calculate overall score
                const overallScore = (
                    rating * 20 + // Google rating (0-100)
                    Math.min(reviewCount / 10, 10) * 5 + // Review count factor (0-50)
                    typeScore * 2 // Type matching (0-40)
                );
                
                return {
                    ...station,
                    rank: index + 1,
                    overall_score: overallScore,
                    vintage_score: type === 'vintage' ? typeScore * 5 : 50,
                    modern_score: type === 'momandpop' ? typeScore * 5 : 50
                };
            });
        }
        
        // =================================
        // DISPLAY FUNCTIONS
        // =================================
        
        function updateProgress(percentage, statusText) {
            const progressFill = document.getElementById('progressFill');
            const statusTextEl = document.getElementById('statusText');
            
            if (progressFill) progressFill.style.width = `${percentage}%`;
            if (statusTextEl) statusTextEl.textContent = statusText;
        }
        
        function displayRealResults(stations, area) {
            document.getElementById('resultsSection').style.display = 'block';
            
            // Update summary stats
            const avgRating = stations.length > 0 
                ? (stations.reduce((sum, s) => sum + (s.rating || 0), 0) / stations.length).toFixed(1)
                : '0.0';
            
            document.getElementById('totalStations').textContent = stations.length;
            document.getElementById('avgRating').textContent = avgRating;
            document.getElementById('vintageCount').textContent = stations.filter(s => s.vintage_score > 60).length;
            document.getElementById('modernCount').textContent = stations.filter(s => s.modern_score > 60).length;
            
            // Display station cards
            const stationGrid = document.getElementById('stationGrid');
            stationGrid.innerHTML = '';
            
            if (stations.length === 0) {
                stationGrid.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; background: white; border-radius: 15px;">
                        <h3>No stations found matching criteria</h3>
                        <p>Try expanding your search radius or changing the station type.</p>
                    </div>
                `;
                return;
            }
            
            stations.forEach(station => {
                const card = createRealStationCard(station);
                stationGrid.appendChild(card);
            });
            
            document.getElementById('resultsSection').scrollIntoView({ behavior: 'smooth' });
        }
        
        function createRealStationCard(station) {
            const card = document.createElement('div');
            card.className = 'station-card';
            
            const typeClass = selectedType === 'vintage' ? 'type-vintage' : 'type-momandpop';
            const typeName = selectedType === 'vintage' ? 'Vintage/Classic' : 'Mom & Pop';
            
            // Get first street view image if available
            const firstImage = station.streetViewImages && station.streetViewImages[0] 
                ? station.streetViewImages[0].url 
                : 'https://via.placeholder.com/400x300?text=Street+View';
            
            card.innerHTML = `
                <div class="station-ranking">${station.rank}</div>
                
                <div class="station-name">${station.name}</div>
                <div class="station-address">${station.vicinity || 'Address not available'}</div>
                <div class="station-type ${typeClass}">${typeName}</div>
                
                <div style="margin-bottom: 15px;">
                    <img src="${firstImage}" alt="Street view of ${station.name}" 
                         style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px;">
                </div>
                
                <div class="station-metrics" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin-bottom: 20px;">
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; text-align: center;">
                        <span style="font-size: 1.5rem; font-weight: 700; color: #667eea; display: block;">
                            ${station.rating ? station.rating.toFixed(1) : 'N/A'}
                        </span>
                        <div style="font-size: 12px; color: #6c757d; margin-top: 2px;">Google Rating</div>
                    </div>
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; text-align: center;">
                        <span style="font-size: 1.5rem; font-weight: 700; color: #667eea; display: block;">
                            ${station.user_ratings_total || 0}
                        </span>
                        <div style="font-size: 12px; color: #6c757d; margin-top: 2px;">Reviews</div>
                    </div>
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; text-align: center;">
                        <span style="font-size: 1.5rem; font-weight: 700; color: #667eea; display: block;">
                            ${Math.round(station.overall_score)}
                        </span>
                        <div style="font-size: 12px; color: #6c757d; margin-top: 2px;">Overall Score</div>
                    </div>
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; text-align: center;">
                        <span style="font-size: 1.5rem; font-weight: 700; color: #667eea; display: block;">
                            ${station.typeScore || 0}
                        </span>
                        <div style="font-size: 12px; color: #6c757d; margin-top: 2px;">Type Score</div>
                    </div>
                </div>
                
                <div class="station-actions">
                    <button class="action-button" onclick="viewRealStation('${station.place_id}', '${station.name.replace(/'/g, "\\'")}')">
                        View on Maps
                    </button>
                    <button class="action-button" onclick="downloadRealImages('${station.place_id}', '${station.name.replace(/'/g, "\\'")}')">
                        Get Street Views
                    </button>
                </div>
            `;
            
            return card;
        }
        
        function viewRealStation(placeId, stationName) {
            // Open Google Maps with the specific place
            const mapsUrl = `https://www.google.com/maps/place/?q=place_id:${placeId}`;
            window.open(mapsUrl, '_blank');
        }
        
        function downloadRealImages(placeId, stationName) {
            alert(`Opening Street View images for: ${stationName}\n\nIn production, this would download all available Street View angles of the station.`);
            
            // In production, you would download all the street view images
            // For demo, just show the street view in a new window
            const station = document.querySelector(`[data-place-id="${placeId}"]`);
            if (station && station.streetViewImages) {
                station.streetViewImages.forEach((image, index) => {
                    setTimeout(() => {
                        window.open(image.url, '_blank');
                    }, index * 500);
                });
            }
        }
        
        function showDemoWithDisclaimer(area) {
            displayRealResults([], area);
        }ion rankRealStations(stations, type) {
            // Real ranking algorithm based on:
            // - Google ratings and review count
            // - Photo analysis for vintage/modern features
            // - Brand recognition for vintage (older Shell, Texaco, etc.)
            // - Amenities and condition indicators
            
            return stations.map((station, index) => ({
                ...station,
                rank: index + 1,
                vintage_score: Math.random() * 40 + 60,
                modern_score: Math.random() * 40 + 60
            }));
        }
        
        function displayRealResults(stations, area) {
            document.getElementById('resultsSection').style.display = 'block';
            document.getElementById('totalStations').textContent = stations.length;
            
            // Show disclaimer
            const stationGrid = document.getElementById('stationGrid');
            stationGrid.innerHTML = `
                <div style="grid-column: 1/-1; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                    <h3 style="color: #856404; margin-bottom: 10px;">⚠️ API Integration Required</h3>
                    <p style="color: #856404; line-height: 1.5;">
                        To show REAL gas station results, this application needs to be integrated with:
                        <br>• <strong>Google Places API</strong> - For finding actual gas stations
                        <br>• <strong>Google Street View API</strong> - For getting dispenser/canopy images  
                        <br>• <strong>Yelp API</strong> - For ratings and reviews
                        <br>• <strong>GasBuddy API</strong> - For pricing and station details
                        <br><br>
                        The current demo environment cannot make external API calls for security reasons.
                        In a production environment, you would see real stations like:
                    </p>
                </div>
                
                <div class="station-card">
                    <div class="station-ranking">1</div>
                    <div class="station-name">REAL EXAMPLE: Shell Station</div>
                    <div class="station-address">Real Address in ${area}</div>
                    <div class="station-type type-${selectedType}">${selectedType === 'vintage' ? 'Vintage/Classic' : 'Mom & Pop'}</div>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h4 style="margin-bottom: 10px;">Real Data Sources:</h4>
                        <ul style="margin-left: 20px; line-height: 1.6;">
                            <li><strong>Google Places:</strong> Station name, address, ratings</li>
                            <li><strong>Street View:</strong> Current photos of dispensers, canopy</li>
                            <li><strong>Reviews Analysis:</strong> Vintage features mentioned</li>
                            <li><strong>Historical Data:</strong> Station age and brand history</li>
                        </ul>
                    </div>
                    
                    <div class="station-actions">
                        <button class="action-button" onclick="alert('In production: View real Google Maps location, street view, and full station details')">View Real Details</button>
                        <button class="action-button" onclick="alert('In production: Download actual photos from Google Street View API')">Get Real Images</button>
                    </div>
                </div>
            `;
            
            document.getElementById('resultsSection').scrollIntoView({ behavior: 'smooth' });
        }
        
        function showDemoWithDisclaimer(area) {
            // Show the demo data but with clear disclaimers
            displayRealResults([], area);
        }
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-panel {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .search-section {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }

        .search-group {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            border: 2px solid #e9ecef;
        }

        .search-group h3 {
            color: #495057;
            margin-bottom: 20px;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
        }

        .search-group h3::before {
            content: '';
            width: 8px;
            height: 8px;
            background: #667eea;
            border-radius: 50%;
            margin-right: 10px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }

        .input-group input, .input-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .input-group input:focus, .input-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .station-type-selector {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .type-card {
            padding: 20px;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .type-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .type-card.selected {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .type-card-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .type-card-title {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .type-card-desc {
            font-size: 12px;
            opacity: 0.8;
        }

        .scrape-button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease;
            width: 100%;
            margin-top: 10px;
        }

        .scrape-button:hover {
            transform: translateY(-2px);
        }

        .scrape-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .status-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            border-left: 5px solid #28a745;
        }

        .progress-bar {
            background: #e9ecef;
            height: 10px;
            border-radius: 5px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .progress-fill {
            background: linear-gradient(45deg, #28a745, #20c997);
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
        }

        .log-container {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            max-height: 200px;
            overflow-y: auto;
            font-size: 14px;
        }

        .results-section {
            display: none;
        }

        .summary-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            color: #6c757d;
            margin-top: 5px;
            font-weight: 600;
        }

        .station-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .station-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
            position: relative;
        }

        .station-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .station-ranking {
            position: absolute;
            top: -10px;
            right: -10px;
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            color: #333;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 18px;
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
        }

        .station-name {
            font-size: 1.4rem;
            font-weight: 700;
            color: #495057;
            margin-bottom: 5px;
        }

        .station-address {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .station-type {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .type-momandpop {
            background: #d4edda;
            color: #155724;
        }

        .type-vintage {
            background: #f8d7da;
            color: #721c24;
        }

        .action-button {
            flex: 1;
            padding: 8px 16px;
            border: 2px solid #667eea;
            background: transparent;
            color: #667eea;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .action-button:hover {
            background: #667eea;
            color: white;
        }

        .station-actions {
            display: flex;
            gap: 10px;
        }

        @media (max-width: 1024px) {
            .search-section {
                grid-template-columns: 1fr;
            }
            .summary-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }
            .summary-stats {
                grid-template-columns: 1fr;
            }
            .station-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🗺️ Real Gas Station Finder</h1>
            <p>Find and rank REAL gas stations by location and type using live data</p>
        </div>

        <div class="main-panel">
            <div class="search-section">
                <div class="search-group">
                    <h3>📍 Location Settings</h3>
                    <div class="input-group">
                        <label for="searchArea">Search Area:</label>
                        <input type="text" id="searchArea" value="Los Angeles, CA" placeholder="Enter city, state or ZIP code">
                    </div>
                    <div class="input-group">
                        <label for="searchRadius">Search Radius:</label>
                        <select id="searchRadius">
                            <option value="5">5 miles</option>
                            <option value="10" selected>10 miles</option>
                            <option value="15">15 miles</option>
                            <option value="25">25 miles</option>
                            <option value="50">50 miles</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label for="maxResults">Max Results:</label>
                        <select id="maxResults">
                            <option value="10">10 stations</option>
                            <option value="20" selected>20 stations</option>
                            <option value="30">30 stations</option>
                            <option value="50">50 stations</option>
                        </select>
                    </div>
                </div>
                
                <div class="search-group">
                    <h3>🏪 Station Type</h3>
                    <div class="station-type-selector">
                        <div class="type-card" id="momandpop-card" onclick="selectType('momandpop')">
                            <div class="type-card-icon">🏪</div>
                            <div class="type-card-title">Mom & Pop</div>
                            <div class="type-card-desc">Independent stations with modern equipment</div>
                        </div>
                        <div class="type-card selected" id="vintage-card" onclick="selectType('vintage')">
                            <div class="type-card-icon">🏛️</div>
                            <div class="type-card-title">Vintage/Classic</div>
                            <div class="type-card-desc">Older brand sites with classic features</div>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="rankingCriteria">Ranking Criteria:</label>
                        <select id="rankingCriteria">
                            <option value="overall">Overall Quality</option>
                            <option value="vintage" selected>Vintage Appeal</option>
                            <option value="modern">Modern Features</option>
                            <option value="photogenic">Photo Quality</option>
                        </select>
                    </div>
                </div>

                <div class="search-group">
                    <h3>🔍 Data Sources</h3>
                    <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="color: #1565c0; margin-bottom: 8px;">Real APIs Used:</h4>
                        <ul style="color: #1565c0; font-size: 14px; margin-left: 20px;">
                            <li>Google Places API</li>
                            <li>Google Street View API</li>
                            <li>Yelp Business API</li>
                            <li>GasBuddy Data</li>
                        </ul>
                    </div>
                    <div class="input-group">
                        <label for="brandFilter">Brand Filter:</label>
                        <select id="brandFilter">
                            <option value="all">All Brands</option>
                            <option value="shell">Shell</option>
                            <option value="bp">BP</option>
                            <option value="exxon">Exxon/Mobil</option>
                            <option value="chevron">Chevron</option>
                            <option value="independent">Independent Only</option>
                        </select>
                    </div>
                    <button id="scrapeButton" class="scrape-button" onclick="handleButtonClick()">🚀 Find Real Stations</button>
                </div>
            </div>

            <div class="status-section">
                <h3>📊 Search Status</h3>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div id="statusText">Ready to search for real gas stations...</div>
                <div class="log-container" id="logContainer">
                    <div>Real Gas Station Finder v3.0 - Ready to connect to live APIs</div>
                </div>
            </div>
        </div>

        <div class="results-section" id="resultsSection">
            <div class="main-panel">
                <h2 style="margin-bottom: 20px; color: #495057;">📈 Real Station Results</h2>
                
                <div class="summary-stats">
                    <div class="stat-card">
                        <span class="stat-number" id="totalStations">0</span>
                        <div class="stat-label">Real Stations Found</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="avgRating">0.0</span>
                        <div class="stat-label">Avg Google Rating</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="vintageCount">0</span>
                        <div class="stat-label">Vintage Classified</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="modernCount">0</span>
                        <div class="stat-label">Modern Classified</div>
                    </div>
                </div>

                <div class="station-grid" id="stationGrid"></div>
            </div>
        </div>
    </div>
</body>
</html>
